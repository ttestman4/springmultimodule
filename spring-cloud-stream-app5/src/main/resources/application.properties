spring.cloud.function.definition=currentTime;print

# Binding
spring.cloud.stream.kafka.binder.auto-add-partitions=true
# spring.cloud.stream.kafka.binder.min-partition-count=4

spring.cloud.stream.bindings.currentTime-out-0.destination=current-time
# Kafka does not with custom key.  It only works with the kafka headers
# spring.cloud.stream.bindings.currentTime-out-0.producer.partition-key-expression=headers['partitionKey']
spring.cloud.stream.bindings.currentTime-out-0.producer.partition-count=4
spring.cloud.stream.bindings.print-in-0.destination=current-time
spring.cloud.stream.bindings.print-in-0.consumer.partitioned=true
spring.cloud.stream.bindings.print-in-0.group=myPrintGroup

spring.cloud.stream.bindings.currentTime-out-0.producer.use-native-encoding=true
spring.cloud.stream.kafka.bindings.currentTime-out-0.producer.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.bindings.currentTime-out-0.producer.configuration.value.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.bindings.print-in-0.consumer.configuration.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.kafka.bindings.print-in-0.consumer.configuration.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer


# spring.cloud.stream.kafka.streams.binder.deserializationExceptionHandler=logAndFail

management.endpoint.health.show-details=ALWAYS
management.endpoints.web.exposure.include=metrics,health,kafkastreamstopology,bindings

logging.pattern.console=%d [%t] %m%n
logging.level.root=error
logging.level.scst.app1=info