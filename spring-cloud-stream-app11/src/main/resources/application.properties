server.port = 8091

# logging.pattern.console=%d [%t] %m%n
logging.pattern.console=%d %m%n
logging.level.root=warn
logging.level.com.example==info

management.endpoint.health.show-details=ALWAYS
management.endpoints.web.exposure.include=metrics,health,kafkastreamstopology,bindings

# curl localhost:8091/actuator/health | jq .
# curl localhost:8091/actuator/metrics | jq .
# curl localhost:8091/actuator/metrics/kafka.stream.thread.commit.total | jq .
# curl localhost:8091/actuator/kafkastreamstopology | jq .
# curl localhost:8091/actuator/kafkastreamstopology/clicks-applicationId
# curl localhost:8091/actuator/kafkastreamstopology/updates-applicationId
# Popular UI tool for visualizing the topology: https://zz85.github.io/kafka-streams-viz/
# curl localhost:8091/actuator/bindings | jq .
# curl -d '{"state":"STOPPED"}' -H "Content-Type: application/json" -X POST http://localhost:8091/actuator/bindings/process-in-0
# curl -d '{"state":"STARTED"}' -H "Content-Type: application/json" -X POST http://localhost:8091/actuator/bindings/process-in-0

spring.kafka.streams.application-id=template-architecture

config.binder-name=rest-out-0
spring.cloud.function.definition=print;eventListener;processName;employeeFeed

# Binding
spring.cloud.stream.kafka.binder.auto-add-partitions=true

config.enable-batch-feed=false
spring.cloud.stream.bindings.employeeFeed-out-0.destination=emp-feed
# spring.cloud.stream.bindings.employeeFeed-out-0.producer.partition-count=4
spring.cloud.stream.bindings.employeeFeed-out-0.producer.use-native-encoding=true
spring.cloud.stream.kafka.bindings.employeeFeed-out-0.producer.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.bindings.employeeFeed-out-0.producer.configuration.value.serializer=org.springframework.kafka.support.serializer.JsonSerializer

config.enable-string-listner=false
spring.cloud.stream.bindings.print-in-0.destination=emp-feed,name-out
spring.cloud.stream.bindings.print-in-0.consumer.partitioned=true
spring.cloud.stream.bindings.print-in-0.group=myPrintGroup
spring.cloud.stream.kafka.bindings.print-in-0.consumer.configuration.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.kafka.bindings.print-in-0.consumer.configuration.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

config.enable-employee-listner=true
# Listener can use regular expression for topics
spring.cloud.stream.bindings.eventListener-in-0.destination=.*
spring.cloud.stream.kafka.bindings.eventListener-in-0.consumer.destination-is-pattern=true
spring.cloud.stream.bindings.eventListener-in-0.consumer.partitioned=true
spring.cloud.stream.bindings.eventListener-in-0.group=applicationEventLogger
spring.cloud.stream.kafka.bindings.eventListener-in-0.consumer.configuration.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.kafka.bindings.eventListener-in-0.consumer.configuration.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

spring.cloud.stream.bindings.processName-in-0.destination=emp-feed,emp-online
spring.cloud.stream.bindings.processName-in-0.group=nameProcessorGroup
spring.cloud.stream.bindings.processName-out-0.destination=name-out
spring.cloud.stream.kafka.streams.bindings.processName-out-0.producer.keySerde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.processName-out-0.producer.valueSerde=org.springframework.kafka.support.serializer.JsonSerde

spring.cloud.stream.bindings.rest-out-0.destination=emp-online
spring.cloud.stream.bindings.rest-out-0.producer.use-native-encoding=true
spring.cloud.stream.kafka.bindings.rest-out-0.producer.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.bindings.rest-out-0.producer.configuration.value.serializer=org.springframework.kafka.support.serializer.JsonSerializer