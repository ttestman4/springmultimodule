server.port = 8091

# logging.pattern.console=%d [%t] %m%n
logging.pattern.console=%d %m%n
logging.level.root=warn
logging.level.com.example==info

management.endpoint.health.show-details=ALWAYS
management.endpoints.web.exposure.include=metrics,health,kafkastreamstopology,bindings

# curl localhost:8091/actuator/health | jq .
# curl localhost:8091/actuator/metrics | jq .
# curl localhost:8091/actuator/metrics/kafka.stream.thread.commit.total | jq .
# curl localhost:8091/actuator/kafkastreamstopology | jq .
# curl localhost:8091/actuator/kafkastreamstopology/clicks-applicationId
# curl localhost:8091/actuator/kafkastreamstopology/updates-applicationId
# Popular UI tool for visualizing the topology: https://zz85.github.io/kafka-streams-viz/
# curl localhost:8091/actuator/bindings | jq .
# curl -d '{"state":"STOPPED"}' -H "Content-Type: application/json" -X POST http://localhost:8091/actuator/bindings/process-in-0
# curl -d '{"state":"STARTED"}' -H "Content-Type: application/json" -X POST http://localhost:8091/actuator/bindings/process-in-0

spring.kafka.streams.application-id=template-architecture
spring.cloud.stream.kafka.binder.auto-create-topics=true
spring.cloud.stream.kafka.binder.auto-add-partitions=true
spring.cloud.stream.kafka.binder.min-partition-count=2
# Not working concurrency at global level
# spring.cloud.stream.kafka.binder.configuration.num.stream.threads=2
# spring.cloud.stream.kafka.streams.binder.configuration.num.stream.threads=2
# spring.cloud.stream.kafka.streams.binder.consumer-properties.concurrency=2
# spring.cloud.stream.kafka.binder.configuration.consumer.concurrency=2
# spring.cloud.stream.kafka.binder.consumer-properties.concurrency=2

config.binder-name=rest-out-0
spring.cloud.function.definition=print;eventListener;processName;employeeFeed

spring.cloud.stream.bindings.employeeFeed-out-0.destination=emp-feed
# spring.cloud.stream.bindings.employeeFeed-out-0.producer.partition-count=4
spring.cloud.stream.bindings.employeeFeed-out-0.producer.use-native-encoding=true
spring.cloud.stream.bindings.employeeFeed-out-0.producer.auto-startup=false
# curl -d '{"state":"STARTED"}' -H "Content-Type: application/json" -X POST http://localhost:8091/actuator/bindings/employeeFeed-out-0
# curl -d '{"state":"STOPPED"}' -H "Content-Type: application/json" -X POST http://localhost:8091/actuator/bindings/employeeFeed-out-0
spring.cloud.stream.kafka.bindings.employeeFeed-out-0.producer.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.bindings.employeeFeed-out-0.producer.configuration.value.serializer=org.springframework.kafka.support.serializer.JsonSerializer

spring.cloud.stream.bindings.print-in-0.destination=.*
spring.cloud.stream.kafka.bindings.print-in-0.consumer.destination-is-pattern=true
spring.cloud.stream.bindings.print-in-0.consumer.partitioned=true
spring.cloud.stream.bindings.print-in-0.consumer.auto-startup=false
# curl -d '{"state":"STARTED"}' -H "Content-Type: application/json" -X POST http://localhost:8091/actuator/bindings/print-in-0
# curl -d '{"state":"STOPPED"}' -H "Content-Type: application/json" -X POST http://localhost:8091/actuator/bindings/print-in-0
spring.cloud.stream.bindings.print-in-0.group=myPrintGroup
spring.cloud.stream.kafka.bindings.print-in-0.consumer.configuration.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.kafka.bindings.print-in-0.consumer.configuration.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Listener can use regular expression for topics
spring.cloud.stream.bindings.eventListener-in-0.destination=.*
spring.cloud.stream.kafka.bindings.eventListener-in-0.consumer.destination-is-pattern=true
spring.cloud.stream.bindings.eventListener-in-0.consumer.partitioned=true
spring.cloud.stream.bindings.eventListener-in-0.consumer.concurrency=2
spring.cloud.stream.bindings.eventListener-in-0.group=applicationEventLogger
spring.cloud.stream.bindings.eventListener-in-0.consumer.auto-startup=true
# curl -d '{"state":"STARTED"}' -H "Content-Type: application/json" -X POST http://localhost:8091/actuator/bindings/eventListener-in-0
# curl -d '{"state":"STOPPED"}' -H "Content-Type: application/json" -X POST http://localhost:8091/actuator/bindings/eventListener-in-0
spring.cloud.stream.kafka.bindings.eventListener-in-0.consumer.configuration.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.kafka.bindings.eventListener-in-0.consumer.configuration.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

spring.cloud.stream.bindings.processName-in-0.destination=emp-feed,emp-online
spring.cloud.stream.bindings.processName-in-0.group=nameProcessorGroup
spring.cloud.stream.bindings.processName-in-0.consumer.concurrency=2
# https://docs.spring.io/spring-cloud-stream/docs/Brooklyn.RELEASE/reference/html/_configuration_options.html
# spring.cloud.stream.bindings.processName-in-0.consumer.default-retryable=false # Not working as expected
spring.cloud.stream.bindings.processName-in-0.consumer.max-attempts=6
spring.cloud.stream.bindings.processName-in-0.consumer.back-off-initial-interval=2000
spring.cloud.stream.bindings.processName-in-0.consumer.back-off-multiplier=2
spring.cloud.stream.bindings.processName-in-0.consumer.back-off-max-interval=200000
# https://docs.spring.io/spring-cloud-stream/docs/4.0.4/reference/html/spring-cloud-stream-binder-kafka.html#_simple_dlq_with_kafka
spring.cloud.stream.kafka.bindings.processName-in-0.consumer.enable-dlq=true
# spring.cloud.stream.kafka.bindings.processName-in-0.consumer.dlq-partitions=2
spring.cloud.stream.kafka.bindings.processName-in-0.consumer.dlq-name=name-error
spring.cloud.stream.kafka.bindings.processName-in-0.consumer.dlq-producer-properties.configuration.keySerde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.bindings.processName-in-0.consumer.dlq-producer-properties.configuration.valueSerde=org.springframework.kafka.support.serializer.JsonSerde
spring.cloud.stream.bindings.processName-out-0.destination=name-out
# spring.cloud.stream.bindings.processName-out-0.producer.partition-count=4
spring.cloud.stream.kafka.streams.bindings.processName-out-0.producer.keySerde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.processName-out-0.producer.valueSerde=org.springframework.kafka.support.serializer.JsonSerde

spring.cloud.stream.bindings.rest-out-0.destination=emp-online
# spring.cloud.stream.bindings.rest-out-0.producer.partition-count=4
spring.cloud.stream.bindings.rest-out-0.producer.use-native-encoding=true
spring.cloud.stream.kafka.bindings.rest-out-0.producer.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.bindings.rest-out-0.producer.configuration.value.serializer=org.springframework.kafka.support.serializer.JsonSerializer