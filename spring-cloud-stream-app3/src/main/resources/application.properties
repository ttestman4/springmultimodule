spring.cloud.function.definition=provideWords;countWords;logWordCount
spring.cloud.stream.bindings.provideWords-out-0.destination=words
spring.cloud.stream.bindings.countWords-in-0.destination=words
spring.cloud.stream.bindings.countWords-out-0.destination=counts
spring.cloud.stream.bindings.logWordCount-in-0.destination=counts

spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=100
spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde=org.apache.kafka.common.serialization.Serdes$StringSerde

management.endpoint.health.show-details=ALWAYS
management.endpoints.web.exposure.include=metrics,health,kafkastreamstopology,bindings

logging.pattern.console=%d [%t] %m%n
logging.level.root=off
logging.level.scst.app1=info

# curl localhost:8080/actuator/health | jq .
# curl localhost:8080/actuator/metrics | jq .
# curl localhost:8080/actuator/metrics/kafka.stream.thread.commit.total | jq .
# curl localhost:8080/actuator/kafkastreamstopology | jq .
# curl localhost:8080/actuator/kafkastreamstopology/clicks-applicationId
# curl localhost:8080/actuator/kafkastreamstopology/updates-applicationId
# Popular UI tool for visualizing the topology: https://zz85.github.io/kafka-streams-viz/
# curl localhost:8080/actuator/bindings | jq .
# curl -d '{"state":"STOPPED"}' -H "Content-Type: application/json" -X POST http://localhost:8080/actuator/bindings/process-in-0
# curl -d '{"state":"STARTED"}' -H "Content-Type: application/json" -X POST http://localhost:8080/actuator/bindings/process-in-0